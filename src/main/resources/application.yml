spring:
  datasource:
        url: jdbc:postgresql://localhost:5432/itcompanion
        username: postgres
        password: Herinihaja96
        platform: postgres
        
  jpa:
        database: POSTGRESQL
        show-sql: true
        generate-ddl : true
        hibernate:
            ddl-auto: create-drop
        properties:
                  hibernate:
                            jdbc:
                                  lob: 
                                      non_contextual_creation : true
  security:
    oauth2:
      client:
        registration:
          facebook:
            client-id: 700314517221243
            client-secret: ac419126a5fadec554897f79509c82d5
            redirect-uri: "{baseUrl}/oauth2/callback/{registrationId}"
            scope:
                - email
                - public_profile
        provider:
          facebook:
            authorizationUri: https://www.facebook.com/v3.0/dialog/oauth
            token-uri: https://graph.facebook.com/v3.0/oauth/access_token
            user-info-uri: https://graph.facebook.com/v3.0/me?fields=id,first_name,middle_name,last_name,name,email,verified,is_verified,picture.width(250).height(250)
app:
  auth:
    tokenSecret: 926D96C90030DD58429D2751AC1BDBBC
    tokenExpirationMsec: 864000000
  oauth2:
    # After successfully authenticating with the OAuth2 Provider,
    # we'll be generating an auth token for the user and sending the token to the
    # redirectUri mentioned by the frontend client in the /oauth2/authorize request.
    # We're not using cookies because they won't work well in mobile clients.
    authorizedRedirectUris:
      - http://localhost:3000/oauth2/redirect
      - myandroidapp://oauth2/redirect
      - myiosapp://oauth2/redirect          
       
         
